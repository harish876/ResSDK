/* tslint:disable */
/* eslint-disable */
/**
 * ResilientDB API
 * Key-Value Querying Interface for ResilientDB
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommitTransactionRequest,
  CommitTransactionResponse,
  ErrorResponse,
  GetTransactionRequest,
  GetTransactionResponse,
} from '../models/index';
import {
    CommitTransactionRequestFromJSON,
    CommitTransactionRequestToJSON,
    CommitTransactionResponseFromJSON,
    CommitTransactionResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetTransactionRequestFromJSON,
    GetTransactionRequestToJSON,
    GetTransactionResponseFromJSON,
    GetTransactionResponseToJSON,
} from '../models/index';

export interface CommitTransactionOperationRequest {
    commitTransactionRequest: CommitTransactionRequest;
}

export interface FindRequest {
    getTransactionRequest: GetTransactionRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Insert, update data or create collections
     * Commit a transaction
     */
    async commitTransactionRaw(requestParameters: CommitTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommitTransactionResponse>> {
        if (requestParameters['commitTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'commitTransactionRequest',
                'Required parameter "commitTransactionRequest" was null or undefined when calling commitTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v2/transactions/commit`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommitTransactionRequestToJSON(requestParameters['commitTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommitTransactionResponseFromJSON(jsonValue));
    }

    /**
     * Insert, update data or create collections
     * Commit a transaction
     */
    async commitTransaction(requestParameters: CommitTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommitTransactionResponse> {
        const response = await this.commitTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve data from a collection using key-value filters
     * Get transactions by filter
     */
    async findRaw(requestParameters: FindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionResponse>> {
        if (requestParameters['getTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'getTransactionRequest',
                'Required parameter "getTransactionRequest" was null or undefined when calling find().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v2/transactions/get`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetTransactionRequestToJSON(requestParameters['getTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve data from a collection using key-value filters
     * Get transactions by filter
     */
    async find(requestParameters: FindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionResponse> {
        const response = await this.findRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
