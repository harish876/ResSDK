/* tslint:disable */
/* eslint-disable */
/**
 * ResilientDB API
 * Key-Value Querying Interface for ResilientDB
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CommitTransactionRequestValue
 */
export interface CommitTransactionRequestValue {
    /**
     * Name of the collection
     * @type {string}
     * @memberof CommitTransactionRequestValue
     */
    collectionName: string;
    /**
     * Data to insert/update/delete (for INSERT transactions)
     * @type {object}
     * @memberof CommitTransactionRequestValue
     */
    value?: object;
    /**
     * Collection options (for CREATE_COLLECTION transactions)
     * @type {object}
     * @memberof CommitTransactionRequestValue
     */
    options?: object;
    /**
     * Collection schema (for CREATE_COLLECTION transactions)
     * @type {object}
     * @memberof CommitTransactionRequestValue
     */
    schema?: object;
}

/**
 * Check if a given object implements the CommitTransactionRequestValue interface.
 */
export function instanceOfCommitTransactionRequestValue(value: object): value is CommitTransactionRequestValue {
    if (!('collectionName' in value) || value['collectionName'] === undefined) return false;
    return true;
}

export function CommitTransactionRequestValueFromJSON(json: any): CommitTransactionRequestValue {
    return CommitTransactionRequestValueFromJSONTyped(json, false);
}

export function CommitTransactionRequestValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommitTransactionRequestValue {
    if (json == null) {
        return json;
    }
    return {
        
        'collectionName': json['collection_name'],
        'value': json['value'] == null ? undefined : json['value'],
        'options': json['options'] == null ? undefined : json['options'],
        'schema': json['schema'] == null ? undefined : json['schema'],
    };
}

export function CommitTransactionRequestValueToJSON(json: any): CommitTransactionRequestValue {
    return CommitTransactionRequestValueToJSONTyped(json, false);
}

export function CommitTransactionRequestValueToJSONTyped(value?: CommitTransactionRequestValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'collection_name': value['collectionName'],
        'value': value['value'],
        'options': value['options'],
        'schema': value['schema'],
    };
}

